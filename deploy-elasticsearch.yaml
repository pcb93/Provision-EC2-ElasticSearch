---
- name: Stage instance(s)
  hosts: localhost                              
  connection: local                   # connection plugin allows ansible to execute tasks on the Ansible ‘controller’
  gather_facts: false                 # checking information is disabled
  
  tasks:
    - name: 'Provision EC2-Instance'  # Brings Up AWS Instance
      ec2:
        count: 1                      # Only 1 AWS Instance
        group_id: sg-0e1f3aad9b470b80f
        image: ami-0885b1f6bd170450c  # Image_id of Ubuntu Server
        instance_type: t2.micro       # size of the server
        key_name: mykey-NV            # Private key used for ssh
        region: us-east-1
        vpc_subnet_id: subnet-00bebd8f6616120ad
        wait: yes                     # Wait after provisioning of Instance
        assign_public_ip: yes
      register: ec2                   # store the command output in a variable and access it later

    - name: Add the newly created host so that we can further contact it
      add_host:
         name: "{{ item.public_ip }}"   # dynamically asssinging the public-ip 
         groups: deploy                 # Creating deploy group in the new Instance    
      with_items: "{{ ec2.instances }}"


    - name: Wait for SSH to come up
      wait_for:                          # Waiting for a port to become available
        host: "{{ item.public_ip }}"     # connecting with the new instance via ssh
        port: 22                         # Enabling default port for ssh  
        state: started 
      with_items: "{{ ec2.instances }}"

    - name: accept new ssh fingerprints                                         
      shell: ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts    # run and add the remote SSH fingerprint to the local machine          
      with_items: '{{ ec2.instances }}' 

    - name: Break-Time                       # (Ansible uses python apt, has issues running directly after boot)
      pause: seconds=5

- name: Configuring ElasticSearch            # ElasticSerach Workflow
  hosts: deploy                              # creating group deploy in the hosts
  user: ubuntu                               # New Instance has Ubuntu as user as AMI is Ubuntu
  become_method: sudo                        # switching to root user
  become: true                               # automatically runs everything as root
  gather_facts: false
  
  tasks:
    - name: update cache and ignore errors in case of problems
      become: yes
      apt: update_cache=yes                  # Updating the new instance with apt package-manager
      ignore_errors: yes

    
    - name: install java 8                   # installing java as elasticsearch is dependent on java
      become: yes
      apt: 
        name: openjdk-8-jdk
        purge: yes
        state: present

    - name: Set Java home
      shell: sudo echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> /etc/environment    

    - name: export Java home
      shell: export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64  

    - name: Download ElasticSearch package              # Downloading GPG-KEY gor elastic search
      shell: wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -

    - name: check package list                         # looking for alternatives among the packages
      shell: echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list

    - name: update cache and ignore errors in case of problems
      become: yes
      apt: update_cache=yes
      ignore_errors: yes

    - name: install elasticsearch     # installing Elasticsearch
      become: yes
      apt: 
        name: elasticsearch
        purge: yes
        state: present
      notify: restart elasticsearch   # pointing to handlers in order to enable the tsak
    
  handlers:                           # reference from elasticserach task to restart the service
    - name: restart elasticsearch
      action: service name=elasticsearch state=restarted

 
